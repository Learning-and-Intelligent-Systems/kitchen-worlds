{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Kitchen Worlds # A library of long-horizon Task-and-Motion-Planning (TAMP) problems in kitchen and household scenes, as well as planners to solve them visualize a scene in LISDF format (an extension to SDF that includes URDF) solve a TAMP problem using PDDLStream defined with a scene.lisdf, problem.pddl, domain.pddl, stream.pddl procedurally generate scenes with rigid and articulated objects Setup # Grab the lisdf package: cd kitchen-worlds git submodule update --init --recursive pip install -r requirements.txt Examples # To run all tests before git push, do cd tests sh run_tests.sh To test basic lisdf functions ## Test LISDF parser python test_parse_lisdf.py ## Test load LISDF to Pybullet python test_pybullet_lisdf.py ## Test parse problem.pddl python test_parse_pddl.py To solve some test problems wih PDDLStream, -test takes the name of subdirectory inside test_cases folder, e.g. blocks_pick , blocks_kitchen , kitchen : python test_pddlstream.py -test blocks_pick To build some scenes python test_world_builder.py LISDF Spec # Current kitchen scenes in the format of .lisdf are in path asset/scenes/ , e.g. kitchen_counter.lisdf as simulated below. Test LISDF + PDDL + Streams with PDDLStream # Set up PDDLStream # # git submodule add https://github.com/caelan/pddlstream.git cd pddlstream git submodule update --init --recursive ## may take a few minutes ./downward/build.py ## may take a few minutes cd examples/pybullet/utils git pull origin master cd motion git pull origin master Troubleshooting # File \"/Users/z/Documents/simulators/PyBullet/kitchen-worlds/pddlstream/examples/pybullet/utils/pybullet_tools/utils.py\", line 3572, in get_closest_points return [CollisionInfo(*info) for info in results] TypeError: 'NoneType' object is not iterable Acknowledgements # This repo works thanks for the tools provided by LIS lab members and alum: the pybullet_tools package is an awesome set of tools developed by Caelan Garret. A forked version is included with my own helper functions. the pddlstream is a planning framework developed by Caelan Garret. the lisdf package is an input/output specification for TAMP problems developed by William Shen, Nishanth Kumar, Aidan Curtis, and Jiayuan Mao. All the object models and urdf files are downloaded for free from the following sources: most articulated object models are downloaded from PartNet Mobility dataset (Mo, Kaichun, et al. \"Partnet: A large-scale benchmark for fine-grained and hierarchical part-level 3d object understanding.\" Proceedings of the IEEE/CVF conference on computer vision and pattern recognition . 2019.) most kitchen object models are downloaded from Free3D . TODO # [x] add requirements.txt [x] upload test scene files in the format of .lisdf -> need lisdf team to support a few more tags, including xml <include><uri>...</uri></include> <state>...</state> [x] upload test scene files with <world><gui><camera><pose> [x] update problem files in the format of problem.pddl [x] upload implicit domain files in the format of domain.pddl [x] add instructions to solve the example problems with TAMP planner PDDLStream [x] add instructions on generating kitchen scenes with scripts in cognitive-architectures [ ]","title":"Kitchen Worlds"},{"location":"#kitchen-worlds","text":"A library of long-horizon Task-and-Motion-Planning (TAMP) problems in kitchen and household scenes, as well as planners to solve them visualize a scene in LISDF format (an extension to SDF that includes URDF) solve a TAMP problem using PDDLStream defined with a scene.lisdf, problem.pddl, domain.pddl, stream.pddl procedurally generate scenes with rigid and articulated objects","title":"Kitchen Worlds"},{"location":"#setup","text":"Grab the lisdf package: cd kitchen-worlds git submodule update --init --recursive pip install -r requirements.txt","title":"Setup"},{"location":"#examples","text":"To run all tests before git push, do cd tests sh run_tests.sh To test basic lisdf functions ## Test LISDF parser python test_parse_lisdf.py ## Test load LISDF to Pybullet python test_pybullet_lisdf.py ## Test parse problem.pddl python test_parse_pddl.py To solve some test problems wih PDDLStream, -test takes the name of subdirectory inside test_cases folder, e.g. blocks_pick , blocks_kitchen , kitchen : python test_pddlstream.py -test blocks_pick To build some scenes python test_world_builder.py","title":"Examples"},{"location":"#lisdf-spec","text":"Current kitchen scenes in the format of .lisdf are in path asset/scenes/ , e.g. kitchen_counter.lisdf as simulated below.","title":"LISDF Spec"},{"location":"#test-lisdf-pddl-streams-with-pddlstream","text":"","title":"Test LISDF + PDDL + Streams with PDDLStream"},{"location":"#set-up-pddlstream","text":"# git submodule add https://github.com/caelan/pddlstream.git cd pddlstream git submodule update --init --recursive ## may take a few minutes ./downward/build.py ## may take a few minutes cd examples/pybullet/utils git pull origin master cd motion git pull origin master","title":"Set up PDDLStream"},{"location":"#troubleshooting","text":"File \"/Users/z/Documents/simulators/PyBullet/kitchen-worlds/pddlstream/examples/pybullet/utils/pybullet_tools/utils.py\", line 3572, in get_closest_points return [CollisionInfo(*info) for info in results] TypeError: 'NoneType' object is not iterable","title":"Troubleshooting"},{"location":"#acknowledgements","text":"This repo works thanks for the tools provided by LIS lab members and alum: the pybullet_tools package is an awesome set of tools developed by Caelan Garret. A forked version is included with my own helper functions. the pddlstream is a planning framework developed by Caelan Garret. the lisdf package is an input/output specification for TAMP problems developed by William Shen, Nishanth Kumar, Aidan Curtis, and Jiayuan Mao. All the object models and urdf files are downloaded for free from the following sources: most articulated object models are downloaded from PartNet Mobility dataset (Mo, Kaichun, et al. \"Partnet: A large-scale benchmark for fine-grained and hierarchical part-level 3d object understanding.\" Proceedings of the IEEE/CVF conference on computer vision and pattern recognition . 2019.) most kitchen object models are downloaded from Free3D .","title":"Acknowledgements"},{"location":"#todo","text":"[x] add requirements.txt [x] upload test scene files in the format of .lisdf -> need lisdf team to support a few more tags, including xml <include><uri>...</uri></include> <state>...</state> [x] upload test scene files with <world><gui><camera><pose> [x] update problem files in the format of problem.pddl [x] upload implicit domain files in the format of domain.pddl [x] add instructions to solve the example problems with TAMP planner PDDLStream [x] add instructions on generating kitchen scenes with scripts in cognitive-architectures [ ]","title":"TODO"},{"location":"domain-rearrangement/","text":"The Rearrangement Domain # As an example of long-horizon TAMP problems in large, complex environment, we created the domain rearrangement.pddl that includes the operators and axioms for a variety of household rearrangement problems. Four Categories of Problems # The The Domain # Operators #","title":"Rearrangement"},{"location":"domain-rearrangement/#the-rearrangement-domain","text":"As an example of long-horizon TAMP problems in large, complex environment, we created the domain rearrangement.pddl that includes the operators and axioms for a variety of household rearrangement problems.","title":"The Rearrangement Domain"},{"location":"domain-rearrangement/#four-categories-of-problems","text":"The","title":"Four Categories of Problems"},{"location":"domain-rearrangement/#the-domain","text":"","title":"The Domain"},{"location":"domain-rearrangement/#operators","text":"","title":"Operators"},{"location":"project-minutes/","text":"Minutes # Link to the editable Google Doc is here . Link to the editable Google Doc is here .","title":"Minutes"},{"location":"project-minutes/#minutes","text":"Link to the editable Google Doc is here . Link to the editable Google Doc is here .","title":"Minutes"},{"location":"project-plans/","text":"Plans #","title":"Plans"},{"location":"project-plans/#plans","text":"","title":"Plans"},{"location":"setup-mkdocs/","text":"Set up the documentation # The documentation source files are in GenesisCore/documentation folder. Here is the layout of the documentation project: mkdocs.yml # The configuration file, e.g., for organizing the pages docs/ index.md # The documentation homepage ... # Other markdown pages imgs/ ... # Images for documentation and README.md css/ extra.css # style file to customize based on site/theme.css and site/theme_extra.css site/ # You can ignore thing here, MkDocs generNates them when you deploy the page Step 1: Install MkDocs # MkDocs is a Python package for generating static sites, especially good for the documentation style. Documentation source files are written in Markdown, and configured with a single YAML configuration file. You can install MkDocs using pip or other package manager. Install with pip # If you use the Python package manager, pip , then you can: $ pip install --upgrade pip $ pip install mkdocs To check that it is installed: $ mkdocs --version mkdocs, version version 1.2.2 from ... Install with a Package Manager # If you prefer useing another package manager (such as apt-get , dnf , homebrew , yum , chocolatey , etc.) to install packages on your system, then you may install MkDocs with your package manager. Step 2: Start MkDocs Server # MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml configuration file, and then start the server by running the mkdocs serve command: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000 [I 160402 15:50:43 handlers:58] Start watching changes ... Now you can view the documentation site in http://127.0.0.1:8000/ , being updated in real time as you save your edits to the files. Step 3: Edit Pages # Before you make changes to the documentation, make sure to git pull the latest changes made by others to avoid conflict. Add a page # If you want to add a page to the wiki, reate a new markdown file in the docs/ directory. Then, add its name and markdown file name to mkdocs.yml , where you will see: nav: - Genesis: - Genesis System: index.md - Contribute to Documentation: mkdocs.md - Representation: - Inner Language - Innerese: innerese.md - ... - Fundamentals: - Inference by Rules: inference.md - ... - The current hierarchy and order is designed so that a new student can use the documentation as a tutorial. Major reorganization is possible upon discussion with Yang : Write in Markdown # Our wiki pages are written in Markdown , a lightweight markup language with plain text formatting syntax. The following cheatsheet designed by Theme Spectre showed the most frequently used syntax: To make it even easier to write in Markdown, you can add Markdown plugin to your editor. For example, I use markdown-editor in Atom to enjoy the following features: Toggle text styles using shortcut such as Ctrl+B Continue lists and table rows when press enter Correct ordered list numbers Step 4: Deploy After Editing # NOTE: At this moment, only Yang should deploy the changes to the website to avoid git merge problems. Please let her know of the changes you made. Routine deploy with one command # Currently, the wiki page is hosted publicly on GitHub. We may later shift over to private domains. After you have made the changes, simply do this in the same directory as the mkdocs.yml file: mkdocs gh-deploy --clean The page will be updated on https://learning-and-intelligent-systems.github.io/kitchen-worlds/ . Note that if you only made changes within the documentation folder, you don't have to git push . The deploy command does it for you. Summary # In this article, you have learned how to install the MkDocs package, write documentation pages, and deloy the site. Every time you make changes to the documentation, you need to use the following two commands at the project directory. $ git pull $ mkdocs serve # before editting, start the MkDocs server During editing, you add and organize pages at the configuration page, mkdocs.yml . After editing, you should let Yang know of the changes you made and git push","title":"Set up MkDocs"},{"location":"setup-mkdocs/#set-up-the-documentation","text":"The documentation source files are in GenesisCore/documentation folder. Here is the layout of the documentation project: mkdocs.yml # The configuration file, e.g., for organizing the pages docs/ index.md # The documentation homepage ... # Other markdown pages imgs/ ... # Images for documentation and README.md css/ extra.css # style file to customize based on site/theme.css and site/theme_extra.css site/ # You can ignore thing here, MkDocs generNates them when you deploy the page","title":"Set up the documentation"},{"location":"setup-mkdocs/#step-1-install-mkdocs","text":"MkDocs is a Python package for generating static sites, especially good for the documentation style. Documentation source files are written in Markdown, and configured with a single YAML configuration file. You can install MkDocs using pip or other package manager.","title":"Step 1: Install MkDocs"},{"location":"setup-mkdocs/#install-with-pip","text":"If you use the Python package manager, pip , then you can: $ pip install --upgrade pip $ pip install mkdocs To check that it is installed: $ mkdocs --version mkdocs, version version 1.2.2 from ...","title":"Install with pip"},{"location":"setup-mkdocs/#install-with-a-package-manager","text":"If you prefer useing another package manager (such as apt-get , dnf , homebrew , yum , chocolatey , etc.) to install packages on your system, then you may install MkDocs with your package manager.","title":"Install with a Package Manager"},{"location":"setup-mkdocs/#step-2-start-mkdocs-server","text":"MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml configuration file, and then start the server by running the mkdocs serve command: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000 [I 160402 15:50:43 handlers:58] Start watching changes ... Now you can view the documentation site in http://127.0.0.1:8000/ , being updated in real time as you save your edits to the files.","title":"Step 2: Start MkDocs Server"},{"location":"setup-mkdocs/#step-3-edit-pages","text":"Before you make changes to the documentation, make sure to git pull the latest changes made by others to avoid conflict.","title":"Step 3: Edit Pages"},{"location":"setup-mkdocs/#add-a-page","text":"If you want to add a page to the wiki, reate a new markdown file in the docs/ directory. Then, add its name and markdown file name to mkdocs.yml , where you will see: nav: - Genesis: - Genesis System: index.md - Contribute to Documentation: mkdocs.md - Representation: - Inner Language - Innerese: innerese.md - ... - Fundamentals: - Inference by Rules: inference.md - ... - The current hierarchy and order is designed so that a new student can use the documentation as a tutorial. Major reorganization is possible upon discussion with Yang :","title":"Add a page"},{"location":"setup-mkdocs/#write-in-markdown","text":"Our wiki pages are written in Markdown , a lightweight markup language with plain text formatting syntax. The following cheatsheet designed by Theme Spectre showed the most frequently used syntax: To make it even easier to write in Markdown, you can add Markdown plugin to your editor. For example, I use markdown-editor in Atom to enjoy the following features: Toggle text styles using shortcut such as Ctrl+B Continue lists and table rows when press enter Correct ordered list numbers","title":"Write in Markdown"},{"location":"setup-mkdocs/#step-4-deploy-after-editing","text":"NOTE: At this moment, only Yang should deploy the changes to the website to avoid git merge problems. Please let her know of the changes you made.","title":"Step 4: Deploy After Editing"},{"location":"setup-mkdocs/#routine-deploy-with-one-command","text":"Currently, the wiki page is hosted publicly on GitHub. We may later shift over to private domains. After you have made the changes, simply do this in the same directory as the mkdocs.yml file: mkdocs gh-deploy --clean The page will be updated on https://learning-and-intelligent-systems.github.io/kitchen-worlds/ . Note that if you only made changes within the documentation folder, you don't have to git push . The deploy command does it for you.","title":"Routine deploy with one command"},{"location":"setup-mkdocs/#summary","text":"In this article, you have learned how to install the MkDocs package, write documentation pages, and deloy the site. Every time you make changes to the documentation, you need to use the following two commands at the project directory. $ git pull $ mkdocs serve # before editting, start the MkDocs server During editing, you add and organize pages at the configuration page, mkdocs.yml . After editing, you should let Yang know of the changes you made and git push","title":"Summary"},{"location":"setup-notes/","text":"Notes # Editors # To embed codes in this documentation, I use https://emgithub.com/ To embed Google Doc/Sheet/Slides in this documentation, go to that document, click menu bar File > Publich to the Web > Embed > Publish . Programmers # To run a test script, instead of ./test_some_script.sh use ./test_some_script.sh 2> /dev/null to suppress warning from killing ghost programs. For easier debugging and learning about unfamiliar packages (e.g. PDDLGym), I'm using PyCharm. But somehow the packages need to be imported from a different path, compared to when I'm testing my script from command line. The following code changes the import script automatically: import sys if sys.stdin and sys.stdin.isatty(): ## to use pddlgym from command line ## e.g., python run.py kitchen_extended.pddl scrambled_eggs.pddl -o obj_extended.pddl -v 0 -e 'experiments/planner_FD' from .pddlgym.pddlgym.parser import PDDLDomainParser, PDDLProblemParser from .pddlgym.pddlgym.core import PDDLEnv else: ## to use pddlgym from PyCharm ## e.g., when testing `experiments/env.py`, or `experiments/pddlgym/pddlgym/downward_translator/normalize.py` from pddlgym.pddlgym.parser import PDDLDomainParser, PDDLProblemParser from pddlgym.pddlgym.core import PDDLEnv","title":"Editor's Notes"},{"location":"setup-notes/#notes","text":"","title":"Notes"},{"location":"setup-notes/#editors","text":"To embed codes in this documentation, I use https://emgithub.com/ To embed Google Doc/Sheet/Slides in this documentation, go to that document, click menu bar File > Publich to the Web > Embed > Publish .","title":"Editors"},{"location":"setup-notes/#programmers","text":"To run a test script, instead of ./test_some_script.sh use ./test_some_script.sh 2> /dev/null to suppress warning from killing ghost programs. For easier debugging and learning about unfamiliar packages (e.g. PDDLGym), I'm using PyCharm. But somehow the packages need to be imported from a different path, compared to when I'm testing my script from command line. The following code changes the import script automatically: import sys if sys.stdin and sys.stdin.isatty(): ## to use pddlgym from command line ## e.g., python run.py kitchen_extended.pddl scrambled_eggs.pddl -o obj_extended.pddl -v 0 -e 'experiments/planner_FD' from .pddlgym.pddlgym.parser import PDDLDomainParser, PDDLProblemParser from .pddlgym.pddlgym.core import PDDLEnv else: ## to use pddlgym from PyCharm ## e.g., when testing `experiments/env.py`, or `experiments/pddlgym/pddlgym/downward_translator/normalize.py` from pddlgym.pddlgym.parser import PDDLDomainParser, PDDLProblemParser from pddlgym.pddlgym.core import PDDLEnv","title":"Programmers"},{"location":"setup-repository/","text":"Set up the Repository # To clone the LEAP repository, you need to send Yang your GitHub username to be invited as a collaborator. Open terminal and go to your favorite work directory (e.g., ~/Documents) to clone the project: git clone git@github.com:zt-yang/leap-architecture.git Planners setup # Add FastDownward or PyperPlan as git submodules: cd planners git submodule add https://github.com/aibasel/downward.git git submodule add https://github.com/aibasel/pyperplan.git git submodule init git submodule update ./downward/build.py release PDDLGym setup # To enable our LEAP agent to interact with the world through observing and replanning (as opposted to take in fully observed state and spill out a plan), we use PDDLGym for constructing a gym-like environment (with state, step, reset) from PDDL. cd environments git submodule add https://github.com/tomsilver/pddlgym git submodule init git submodule update brew install swi-prolog To install swi-prolog with Homebrew, I am runing terminal from Rosetta. PDDLGym support the following subset of PDDL1.2: STRIPS Typing (hierarchical is not working for Prolog inference mode) Quantifiers (forall, exists) Disjunctions (or) Equality Constants Derived predicates (somehow a body of forall doesn't work) It doesn't support the following extensions that our domain uses Conditional effects Action costs So to integrate, I modified PDDLGym so that it ignores warning when handling those extensions. Revised axiom due to ValueError: Cannot instantiate condition: not normalized by pddlgym/downward_translate/pddl/conditions.py ( :derived (is-egg ?i ) (forall (?i - egg) (raw ?i ) ) ) ## occured only once thus i replaced predicate in precondition with the axiom body (:derived (has-parked ?a - agent) (forall (?c - car) (when (agent-owns ?a ?c) (parked ?c) ) ) ) Study Downward Translator # to test LEAP with run.py , we need to comment out the last line setup() in environments/pddlgym/downward_translate/options.py","title":"Set up the Repository"},{"location":"setup-repository/#set-up-the-repository","text":"To clone the LEAP repository, you need to send Yang your GitHub username to be invited as a collaborator. Open terminal and go to your favorite work directory (e.g., ~/Documents) to clone the project: git clone git@github.com:zt-yang/leap-architecture.git","title":"Set up the Repository"},{"location":"setup-repository/#planners-setup","text":"Add FastDownward or PyperPlan as git submodules: cd planners git submodule add https://github.com/aibasel/downward.git git submodule add https://github.com/aibasel/pyperplan.git git submodule init git submodule update ./downward/build.py release","title":"Planners setup"},{"location":"setup-repository/#pddlgym-setup","text":"To enable our LEAP agent to interact with the world through observing and replanning (as opposted to take in fully observed state and spill out a plan), we use PDDLGym for constructing a gym-like environment (with state, step, reset) from PDDL. cd environments git submodule add https://github.com/tomsilver/pddlgym git submodule init git submodule update brew install swi-prolog To install swi-prolog with Homebrew, I am runing terminal from Rosetta. PDDLGym support the following subset of PDDL1.2: STRIPS Typing (hierarchical is not working for Prolog inference mode) Quantifiers (forall, exists) Disjunctions (or) Equality Constants Derived predicates (somehow a body of forall doesn't work) It doesn't support the following extensions that our domain uses Conditional effects Action costs So to integrate, I modified PDDLGym so that it ignores warning when handling those extensions. Revised axiom due to ValueError: Cannot instantiate condition: not normalized by pddlgym/downward_translate/pddl/conditions.py ( :derived (is-egg ?i ) (forall (?i - egg) (raw ?i ) ) ) ## occured only once thus i replaced predicate in precondition with the axiom body (:derived (has-parked ?a - agent) (forall (?c - car) (when (agent-owns ?a ?c) (parked ?c) ) ) )","title":"PDDLGym setup"},{"location":"setup-repository/#study-downward-translator","text":"to test LEAP with run.py , we need to comment out the last line setup() in environments/pddlgym/downward_translate/options.py","title":"Study Downward Translator"},{"location":"tut-lisdf/","text":"LISDF = LIS extended version of SDF # The LISDF format has a few additional tags inside <world></world> compared to SDF : add object and robot models with <include> <uri>URDF_file</uri> <static>true/false</static> <pose>x y z r p y</pose> <scale> an integer to scale model .obj with original ratio</scale> </include> describe camera pose in a way that's easy to export from PyBullet <gui> <camera name=\"default_camera\" definition_type=\"lookat\"> <xyz>3 6 3</xyz> <point_to>0 6 1</point_to> </camera> </gui> apart from what SDF originally supports <gui> <camera name=\"default_camera\" definition_type=\"pose\"> <pose>3 6 3 0 -2.15 0</pose> </camera> </gui> Test Visualize LISDF # You may visualize your LISDF in PyBullet with the following code: cd tests python test_pybullet_lisdf -path path/to/lisdf","title":"LISDF"},{"location":"tut-lisdf/#lisdf-lis-extended-version-of-sdf","text":"The LISDF format has a few additional tags inside <world></world> compared to SDF : add object and robot models with <include> <uri>URDF_file</uri> <static>true/false</static> <pose>x y z r p y</pose> <scale> an integer to scale model .obj with original ratio</scale> </include> describe camera pose in a way that's easy to export from PyBullet <gui> <camera name=\"default_camera\" definition_type=\"lookat\"> <xyz>3 6 3</xyz> <point_to>0 6 1</point_to> </camera> </gui> apart from what SDF originally supports <gui> <camera name=\"default_camera\" definition_type=\"pose\"> <pose>3 6 3 0 -2.15 0</pose> </camera> </gui>","title":"LISDF = LIS extended version of SDF"},{"location":"tut-lisdf/#test-visualize-lisdf","text":"You may visualize your LISDF in PyBullet with the following code: cd tests python test_pybullet_lisdf -path path/to/lisdf","title":"Test Visualize LISDF"},{"location":"tut-lispddl/","text":"LISPDDL = LIS extended version to PDDL for describing TAMP problems # To enable the specification and parsing of continuous objects in PDDL, the LISPDDL format has a few extensions compared to PDDL 1.2 : Test Parsing LISPDDL # You may test parse your problem pddl file with the following: cd tests python test_pybullet_lisdf -s path/to/lisdf -d path/to/domain -d path/to/problem ## for example python test_parse_pddl -s path/to/lisdf -d path/to/domain -d path/to/problem Note that it requires three input: A scene described in LISDF, so that the bodies and links referred as strings in the pddl files can be grounded in the simulator. A partial domain described in PDDL, where the operators are taken out.","title":"LISPDDL"},{"location":"tut-lispddl/#lispddl-lis-extended-version-to-pddl-for-describing-tamp-problems","text":"To enable the specification and parsing of continuous objects in PDDL, the LISPDDL format has a few extensions compared to PDDL 1.2 :","title":"LISPDDL = LIS extended version to PDDL for describing TAMP problems"},{"location":"tut-lispddl/#test-parsing-lispddl","text":"You may test parse your problem pddl file with the following: cd tests python test_pybullet_lisdf -s path/to/lisdf -d path/to/domain -d path/to/problem ## for example python test_parse_pddl -s path/to/lisdf -d path/to/domain -d path/to/problem Note that it requires three input: A scene described in LISDF, so that the bodies and links referred as strings in the pddl files can be grounded in the simulator. A partial domain described in PDDL, where the operators are taken out.","title":"Test Parsing LISPDDL"}]}